#!/bin/bash

# Setup do Database para Sistema Eleitoral CAU
# Requisitos: PostgreSQL instalado e rodando

set -e

echo "üöÄ Configurando Database Sistema Eleitoral CAU..."

# Configura√ß√µes do banco
DB_HOST=${DB_HOST:-localhost}
DB_PORT=${DB_PORT:-5432}
DB_USER=${DB_USER:-postgres}
DB_PASSWORD=${DB_PASSWORD:-postgres}
DB_NAME_DEV=${DB_NAME_DEV:-sistema_eleitoral_dev}
DB_NAME_PROD=${DB_NAME_PROD:-sistema_eleitoral}

# Fun√ß√£o para executar SQL
execute_sql() {
    local database=$1
    local sql_file=$2
    echo "üìù Executando $sql_file no database $database..."
    PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $database -f $sql_file
}

# Fun√ß√£o para criar database
create_database() {
    local db_name=$1
    echo "üóÉÔ∏è  Criando database $db_name..."
    PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -c "CREATE DATABASE $db_name;" postgres || true
}

# Verificar se PostgreSQL est√° rodando
echo "üîç Verificando conex√£o com PostgreSQL..."
if ! PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -c '\l' postgres > /dev/null 2>&1; then
    echo "‚ùå Erro: N√£o foi poss√≠vel conectar ao PostgreSQL"
    echo "   Verifique se o PostgreSQL est√° rodando e as credenciais est√£o corretas"
    echo "   Host: $DB_HOST, Port: $DB_PORT, User: $DB_USER"
    exit 1
fi

echo "‚úÖ Conex√£o com PostgreSQL OK!"

# Criar databases
create_database $DB_NAME_DEV
create_database $DB_NAME_PROD

# Executar migration inicial no database de desenvolvimento
MIGRATION_FILE="../src/SistemaEleitoral.Infrastructure/Migrations/20250806_InitialCreate.sql"
if [ -f "$MIGRATION_FILE" ]; then
    execute_sql $DB_NAME_DEV $MIGRATION_FILE
    echo "‚úÖ Migration inicial executada no database de desenvolvimento!"
else
    echo "‚ö†Ô∏è  Arquivo de migration n√£o encontrado: $MIGRATION_FILE"
fi

# Testar conex√µes
echo "üß™ Testando conex√µes com os databases..."

echo "üìä Testando $DB_NAME_DEV..."
PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME_DEV -c "SELECT COUNT(*) as total_tables FROM information_schema.tables WHERE table_schema = 'public';"

echo "üìä Testando $DB_NAME_PROD..."
PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME_PROD -c "SELECT version();" > /dev/null 2>&1

echo ""
echo "üéâ Setup do database conclu√≠do com sucesso!"
echo ""
echo "üìã Informa√ß√µes dos databases:"
echo "   ‚Ä¢ Desenvolvimento: $DB_NAME_DEV"
echo "   ‚Ä¢ Produ√ß√£o: $DB_NAME_PROD"
echo "   ‚Ä¢ Host: $DB_HOST:$DB_PORT"
echo "   ‚Ä¢ Usu√°rio: $DB_USER"
echo ""
echo "üîó Connection Strings:"
echo "   ‚Ä¢ Dev:  Host=$DB_HOST;Database=$DB_NAME_DEV;Username=$DB_USER;Password=$DB_PASSWORD;Port=$DB_PORT;"
echo "   ‚Ä¢ Prod: Host=$DB_HOST;Database=$DB_NAME_PROD;Username=$DB_USER;Password=$DB_PASSWORD;Port=$DB_PORT;"
echo ""
echo "‚ñ∂Ô∏è  Para testar a API:"
echo "   cd ../src/SistemaEleitoral.Api"
echo "   dotnet run"
using Npgsql;

// Simple database connection test
var connectionString = "Host=localhost;Database=sistema_eleitoral_dev;Username=brunosouza;Port=5432;";

Console.WriteLine("üß™ Teste de Conex√£o com Database");
Console.WriteLine("================================");

try
{
    // Test raw connection
    Console.WriteLine("1. Testando conex√£o direta...");
    using var connection = new NpgsqlConnection(connectionString);
    await connection.OpenAsync();
    Console.WriteLine("‚úÖ Conex√£o PostgreSQL OK!");
    
    // Test query
    Console.WriteLine("\n2. Testando consulta b√°sica...");
    using var command = new NpgsqlCommand("SELECT version();", connection);
    var version = await command.ExecuteScalarAsync();
    Console.WriteLine($"‚úÖ PostgreSQL Version: {version}");
    
    // Test database structure
    Console.WriteLine("\n3. Testando estrutura do database...");
    var tableQuery = @"
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        ORDER BY table_name";
        
    using var tableCommand = new NpgsqlCommand(tableQuery, connection);
    using var reader = await tableCommand.ExecuteReaderAsync();
    
    var tables = new List<string>();
    while (await reader.ReadAsync())
    {
        tables.Add(reader.GetString(0));
    }
    
    Console.WriteLine($"‚úÖ Total de tabelas: {tables.Count}");
    Console.WriteLine("üìã Tabelas encontradas:");
    foreach (var table in tables)
    {
        Console.WriteLine($"   - {table}");
    }
    
    // Test basic table data
    reader.Close();
    Console.WriteLine("\n4. Testando dados b√°sicos...");
    
    var countQuery = "SELECT COUNT(*) FROM ufs";
    using var countCommand = new NpgsqlCommand(countQuery, connection);
    var ufCount = await countCommand.ExecuteScalarAsync();
    Console.WriteLine($"‚úÖ UFs cadastrados: {ufCount}");
    
    var permissionQuery = "SELECT COUNT(*) FROM permissoes";
    using var permissionCommand = new NpgsqlCommand(permissionQuery, connection);
    var permissionCount = await permissionCommand.ExecuteScalarAsync();
    Console.WriteLine($"‚úÖ Permiss√µes cadastradas: {permissionCount}");
}
catch (Exception ex)
{
    Console.WriteLine($"‚ùå Erro: {ex.Message}");
    Console.WriteLine($"Detalhes: {ex}");
    Environment.Exit(1);
}

Console.WriteLine("\nüéâ Teste de conex√£o conclu√≠do com sucesso!");
Console.WriteLine("\nüìä Pr√≥ximos passos:");
Console.WriteLine("   1. Database funcionando perfeitamente ‚úÖ");
Console.WriteLine("   2. Estrutura b√°sica criada ‚úÖ");  
Console.WriteLine("   3. Dados iniciais inseridos ‚úÖ");
Console.WriteLine("   4. Pronto para Entity Framework ‚úÖ");
Console.WriteLine("\n‚ñ∂Ô∏è  Pode prosseguir com a configura√ß√£o da API!");